/* Insight 1.1 - ©2023 Juha Järvinen - MIT license */
function insight(div, input, options) {
  let id = div; let dr = input; let dh = dr.shift(); let wd = document.getElementById(div).offsetWidth - 10; let ws = 135;
  let ovs; let ovc; let ovp; let ovt; let ofs; let ofc; let opr; let opc; let opv; let ops; let opl; let ots; let oth; let otl; let odd;
  if (!options.hasOwnProperty('visibility')) { options.visibility = {settings: true, chart: true, pivot: true, table: true}; } if (!options.hasOwnProperty('filters')) { options.filters = {}; } if (!options.filters.hasOwnProperty('search')) { options.filters.search = ''; } if (!options.filters.hasOwnProperty('columns')) { options.filters.columns = {}; } if (!options.hasOwnProperty('pivot')) { options.pivot = {}; } if (!options.pivot.hasOwnProperty('rows')) { options.pivot.rows = []; } if (!options.pivot.hasOwnProperty('cols')) { options.pivot.cols = []; } if (!options.pivot.hasOwnProperty('value')) { options.pivot.value = {formula: 'Count', column: 0, round: 0}; } if (!options.pivot.hasOwnProperty('sort')) { options.pivot.sort = {row: ['keys', true], col: ['keys', true]}; } if (!options.pivot.hasOwnProperty('limit')) { options.pivot.limit = {rows: 0, cols: 0}; } if (!options.hasOwnProperty('table')) { options.table = {}; } if (!options.table.hasOwnProperty('sort')) { options.table.sort = []; } if (!options.table.hasOwnProperty('hidden')) { options.table.hidden = {}; } if (!options.table.hasOwnProperty('limit')) { options.table.limit = 0; } if (!options.hasOwnProperty('drill_down')) { options.drill_down = {}; }
  this.data = dr; this.options = options; this.render = function(reload) { a(reload); }; this.export = function() { return dr; };
  a(true);
  function a(reload) {
    ovs = options.visibility.settings; ovc = options.visibility.chart; ovp = options.visibility.pivot; ovt = options.visibility.table; ofs = options.filters.search; ofc = options.filters.columns; opr = options.pivot.rows; opc = options.pivot.cols; opv = options.pivot.value; ops = options.pivot.sort; opl = options.pivot.limit; ots = options.table.sort; oth = options.table.hidden; otl = options.table.limit; odd = options.drill_down;
    if (reload) { b(); h(); }
    dr = [];
    for (let i = 0; i < input.length; i++) {
      let s = true;
      let r = Object.values(input[i]);
      if (ofs != '') { if (!r.join().toLowerCase().includes(ofs.toLowerCase())) { s = false; } }
      for (const [x, y] of Object.entries(ofc)) { if (!String(input[i][x]).toLowerCase().includes(y.toLowerCase())) { s = false; } }
      if (s) { dr.push(r); }
    }
    g();
    setTimeout(function() { if (ovc || ovp) { c(); } if (ovt) { d(); } }, 100);
  }
  function b() {
    let t = document.getElementById(div);
    t.style['font-family'] = 'monospace';
    let hm = '<table id="' + id + 'Menu" style="width: ' + wd + 'px; height: 25px; box-shadow: rgba(34, 36, 38, 0.15) 0px 1px 2px 0px; border-spacing: 0; border: 1px solid rgba(34, 36, 38, 0.15); border-radius: 5px; background-color: white; text-align: center; margin: 0px; padding: 0px; margin-bottom: 5px;">'; hm += '<tr style="height: 25px; margin: 0px; padding: 0px;">'; hm += '<td id="' + id + 'ToggleSettings" style="cursor: pointer; '; if (!ovs) { hm += 'background: #dedede; '; } hm += 'height: 25px; width: 10px; margin: 0px; padding: 0px 5px 0px 5px; white-space: nowrap; text-align: center; vertical-align: center; border-right: 1px solid rgba(34, 36, 38, 0.15);"><svg width="18px" height="18px" viewBox="0 0 24 20" fill="none"><path d="M14 5.28988H13C13 5.7323 13.2907 6.12213 13.7148 6.24833L14 5.28988ZM15.3302 5.84137L14.8538 6.72058C15.2429 6.93144 15.7243 6.86143 16.0373 6.54847L15.3302 5.84137ZM16.2426 4.92891L15.5355 4.2218V4.2218L16.2426 4.92891ZM17.6569 4.92891L16.9498 5.63601L16.9498 5.63602L17.6569 4.92891ZM19.0711 6.34312L19.7782 5.63602V5.63602L19.0711 6.34312ZM19.0711 7.75734L18.364 7.05023L19.0711 7.75734ZM18.1586 8.66978L17.4515 7.96268C17.1386 8.27563 17.0686 8.75709 17.2794 9.14621L18.1586 8.66978ZM18.7101 10L17.7517 10.2853C17.8779 10.7093 18.2677 11 18.7101 11V10ZM18.7101 14V13C18.2677 13 17.8779 13.2907 17.7517 13.7148L18.7101 14ZM18.1586 15.3302L17.2794 14.8538C17.0686 15.2429 17.1386 15.7244 17.4515 16.0373L18.1586 15.3302ZM19.0711 16.2427L19.7782 15.5356V15.5356L19.0711 16.2427ZM19.0711 17.6569L18.364 16.9498L18.364 16.9498L19.0711 17.6569ZM17.6569 19.0711L18.364 19.7782V19.7782L17.6569 19.0711ZM15.3302 18.1586L16.0373 17.4515C15.7243 17.1386 15.2429 17.0686 14.8538 17.2794L15.3302 18.1586ZM14 18.7101L13.7148 17.7517C13.2907 17.8779 13 18.2677 13 18.7101H14ZM10 18.7101H11C11 18.2677 10.7093 17.8779 10.2853 17.7517L10 18.7101ZM8.6698 18.1586L9.14623 17.2794C8.7571 17.0685 8.27565 17.1385 7.96269 17.4515L8.6698 18.1586ZM7.75736 19.071L7.05026 18.3639L7.05026 18.3639L7.75736 19.071ZM6.34315 19.071L5.63604 19.7782H5.63604L6.34315 19.071ZM4.92894 17.6568L4.22183 18.3639H4.22183L4.92894 17.6568ZM4.92894 16.2426L4.22183 15.5355H4.22183L4.92894 16.2426ZM5.84138 15.3302L6.54849 16.0373C6.86144 15.7243 6.93146 15.2429 6.7206 14.8537L5.84138 15.3302ZM5.28989 14L6.24835 13.7147C6.12215 13.2907 5.73231 13 5.28989 13V14ZM5.28989 10V11C5.73231 11 6.12215 10.7093 6.24835 10.2852L5.28989 10ZM5.84138 8.66982L6.7206 9.14625C6.93146 8.75712 6.86145 8.27567 6.54849 7.96272L5.84138 8.66982ZM4.92894 7.75738L4.22183 8.46449H4.22183L4.92894 7.75738ZM4.92894 6.34317L5.63605 7.05027H5.63605L4.92894 6.34317ZM6.34315 4.92895L7.05026 5.63606L7.05026 5.63606L6.34315 4.92895ZM7.75737 4.92895L8.46447 4.22185V4.22185L7.75737 4.92895ZM8.6698 5.84139L7.9627 6.54849C8.27565 6.86145 8.7571 6.93146 9.14623 6.7206L8.6698 5.84139ZM10 5.28988L10.2853 6.24833C10.7093 6.12213 11 5.7323 11 5.28988H10ZM11 2C9.89545 2 9.00002 2.89543 9.00002 4H11V4V2ZM13 2H11V4H13V2ZM15 4C15 2.89543 14.1046 2 13 2V4H15ZM15 5.28988V4H13V5.28988H15ZM15.8066 4.96215C15.3271 4.70233 14.8179 4.48994 14.2853 4.33143L13.7148 6.24833C14.1132 6.36691 14.4944 6.52587 14.8538 6.72058L15.8066 4.96215ZM15.5355 4.2218L14.6231 5.13426L16.0373 6.54847L16.9498 5.63602L15.5355 4.2218ZM18.364 4.2218C17.5829 3.44075 16.3166 3.44075 15.5355 4.2218L16.9498 5.63602V5.63601L18.364 4.2218ZM19.7782 5.63602L18.364 4.2218L16.9498 5.63602L18.364 7.05023L19.7782 5.63602ZM19.7782 8.46444C20.5592 7.68339 20.5592 6.41706 19.7782 5.63602L18.364 7.05023L18.364 7.05023L19.7782 8.46444ZM18.8657 9.37689L19.7782 8.46444L18.364 7.05023L17.4515 7.96268L18.8657 9.37689ZM19.6686 9.71475C19.5101 9.18211 19.2977 8.67285 19.0378 8.19335L17.2794 9.14621C17.4741 9.50555 17.6331 9.8868 17.7517 10.2853L19.6686 9.71475ZM18.7101 11H20V9H18.7101V11ZM20 11H22C22 9.89543 21.1046 9 20 9V11ZM20 11V13H22V11H20ZM20 13V15C21.1046 15 22 14.1046 22 13H20ZM20 13H18.7101V15H20V13ZM19.0378 15.8066C19.2977 15.3271 19.5101 14.8179 19.6686 14.2852L17.7517 13.7148C17.6331 14.1132 17.4741 14.4944 17.2794 14.8538L19.0378 15.8066ZM19.7782 15.5356L18.8657 14.6231L17.4515 16.0373L18.364 16.9498L19.7782 15.5356ZM19.7782 18.364C20.5592 17.5829 20.5592 16.3166 19.7782 15.5356L18.364 16.9498H18.364L19.7782 18.364ZM18.364 19.7782L19.7782 18.364L18.364 16.9498L16.9498 18.364L18.364 19.7782ZM15.5355 19.7782C16.3166 20.5592 17.5829 20.5592 18.364 19.7782L16.9498 18.364L15.5355 19.7782ZM14.6231 18.8657L15.5355 19.7782L16.9498 18.364L16.0373 17.4515L14.6231 18.8657ZM14.2853 19.6686C14.8179 19.5101 15.3271 19.2977 15.8066 19.0378L14.8538 17.2794C14.4944 17.4741 14.1132 17.6331 13.7148 17.7517L14.2853 19.6686ZM15 20V18.7101H13V20H15ZM13 22C14.1046 22 15 21.1046 15 20H13V22ZM11 22H13V20H11V22ZM9.00002 20C9.00002 21.1046 9.89545 22 11 22V20H9.00002ZM9.00002 18.7101V20H11V18.7101H9.00002ZM8.19337 19.0378C8.67287 19.2977 9.18213 19.5101 9.71477 19.6686L10.2853 17.7517C9.88681 17.6331 9.50557 17.4741 9.14623 17.2794L8.19337 19.0378ZM8.46447 19.7782L9.3769 18.8657L7.96269 17.4515L7.05026 18.3639L8.46447 19.7782ZM5.63604 19.7782C6.41709 20.5592 7.68342 20.5592 8.46447 19.7781L7.05026 18.3639L5.63604 19.7782ZM4.22183 18.3639L5.63604 19.7782L7.05026 18.3639L5.63604 16.9497L4.22183 18.3639ZM4.22183 15.5355C3.44078 16.3166 3.44078 17.5829 4.22183 18.3639L5.63604 16.9497V16.9497L4.22183 15.5355ZM5.13427 14.6231L4.22183 15.5355L5.63604 16.9497L6.54849 16.0373L5.13427 14.6231ZM4.33144 14.2852C4.48996 14.8179 4.70234 15.3271 4.96217 15.8066L6.7206 14.8537C6.52589 14.4944 6.36693 14.1132 6.24835 13.7147L4.33144 14.2852ZM5.28989 13H4V15H5.28989V13ZM4 13H4H2C2 14.1046 2.89543 15 4 15V13ZM4 13V11H2V13H4ZM4 11V9C2.89543 9 2 9.89543 2 11H4ZM4 11H5.28989V9H4V11ZM4.96217 8.1934C4.70235 8.67288 4.48996 9.18213 4.33144 9.71475L6.24835 10.2852C6.36693 9.88681 6.52589 9.50558 6.7206 9.14625L4.96217 8.1934ZM4.22183 8.46449L5.13428 9.37693L6.54849 7.96272L5.63605 7.05027L4.22183 8.46449ZM4.22183 5.63606C3.44078 6.41711 3.44079 7.68344 4.22183 8.46449L5.63605 7.05027L5.63605 7.05027L4.22183 5.63606ZM5.63605 4.22185L4.22183 5.63606L5.63605 7.05027L7.05026 5.63606L5.63605 4.22185ZM8.46447 4.22185C7.68343 3.4408 6.4171 3.4408 5.63605 4.22185L7.05026 5.63606V5.63606L8.46447 4.22185ZM9.37691 5.13428L8.46447 4.22185L7.05026 5.63606L7.9627 6.54849L9.37691 5.13428ZM9.71477 4.33143C9.18213 4.48995 8.67287 4.70234 8.19337 4.96218L9.14623 6.7206C9.50557 6.52588 9.88681 6.36692 10.2853 6.24833L9.71477 4.33143ZM9.00002 4V5.28988H11V4H9.00002Z" fill="#000000"/><circle cx="12" cy="12" r="3" stroke="#000000" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/></svg></td>'; hm += '<td id="' + id + 'ToggleChart" style="cursor: pointer; '; if (!ovc) { hm += 'background: #dedede; '; } hm += 'height: 25px; width: 10px; margin: 0px; padding: 0px 10px; white-space: nowrap; text-align: center; vertical-align: center; border-right: 1px solid rgba(34, 36, 38, 0.15);"><svg width="18px" height="18px" viewBox="0 0 24 20" fill="none"><path d="M3 14H7V19H3V14Z" stroke="#000000" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/><path d="M10 9H14V19H10V9Z" stroke="#000000" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/><path d="M17 5H21V19H17V5Z" stroke="#000000" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/></svg></td>'; hm += '<td id="' + id + 'TogglePivot" style="cursor: pointer; '; if (!ovp) { hm += 'background: #dedede; '; } hm += 'height: 25px; width: 10px; margin: 0px; padding: 0px 10px; white-space: nowrap; text-align: center; vertical-align: center; border-right: 1px solid rgba(34, 36, 38, 0.15);"><svg width="18px" height="18px" viewBox="0 0 24 20" fill="none"><path d="M4 9V18C4 19.1046 4.89543 20 6 20H9M4 9V6C4 4.89543 4.89543 4 6 4H18C19.1046 4 20 4.89543 20 6V9M4 9H9M20 9H9M20 9V14.5M9 9V14.5M9 20H18C19.1046 20 20 19.1046 20 18V14.5M9 20V14.5M9 14.5H20" stroke="#000000" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/></svg></td>'; hm += '<td id="' + id + 'ToggleTable" style="cursor: pointer; '; if (!ovt) { hm += 'background: #dedede; '; } hm += 'height: 25px; width: 10px; margin: 0px; padding: 0px 10px; white-space: nowrap; text-align: center; vertical-align: center; border-right: 1px solid rgba(34, 36, 38, 0.15);"><svg width="18px" height="18px" viewBox="0 0 24 20" fill="none"><path d="M20 9.33333V6C20 4.89543 19.1046 4 18 4H14.6667M20 9.33333H14.6667M20 9.33333V14.6667M4 9.33333V6C4 4.89543 4.89543 4 6 4H9.33333M4 9.33333H9.33333M4 9.33333V14.6667M14.6667 9.33333H9.33333M14.6667 9.33333V4M14.6667 9.33333V14.6667M9.33333 9.33333V4M9.33333 9.33333V14.6667M20 14.6667V18C20 19.1046 19.1046 20 18 20H14.6667M20 14.6667H14.6667M4 14.6667V18C4 19.1046 4.89543 20 6 20H9.33333M4 14.6667H9.33333M14.6667 14.6667H9.33333M14.6667 14.6667V20M9.33333 14.6667V20M9.33333 4H14.6667M9.33333 20H14.6667" stroke="#000000" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/></svg></td>'; hm += '<td style="opacity: 0;">-</td>'; hm += '<td style="height: 25px; width: 10px; margin: 0px; padding: 0px 10px; white-space: nowrap; text-align: center; vertical-align: center; border-left: 1px solid rgba(34, 36, 38, 0.15);">'; hm += '<input id="' + id + 'Search" value="' + ofs + '" style="all: unset; width: 140px; text-align: left;" type="text" placeholder="Search">'; hm += '</td>'; hm += '<td id="' + id + 'ToggleSearch" style="cursor: pointer; height: 25px; width: 10px; margin: 0px; padding: 0px 10px; white-space: nowrap; text-align: center; vertical-align: center;"><svg width="18px" height="18px" viewBox="0 0 24 19" fill="none"><circle cx="10" cy="10" r="6" stroke="#000000" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/><path d="M14.5 14.5L19 19" stroke="#000000" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/></svg></td>'; hm += '<td id="' + id + 'ToggleLink" style="cursor: pointer; height: 25px; width: 10px; margin: 0px; padding: 0px 5px; white-space: nowrap; text-align: center; vertical-align: center; border-left: 1px solid rgba(34, 36, 38, 0.15);"><svg width="15px" height="20px" viewBox="0 0 20 17"><g stroke="none" stroke-width="1" fill="none" fill-rule="evenodd"><g transform="translate(-140.000000, -7559.000000)" fill="#000000"><g transform="translate(56.000000, 160.000000)"><path d="M94,7399 C99.523,7399 104,7403.59 104,7409.253 C104,7413.782 101.138,7417.624 97.167,7418.981 C96.66,7419.082 96.48,7418.762 96.48,7418.489 C96.48,7418.151 96.492,7417.047 96.492,7415.675 C96.492,7414.719 96.172,7414.095 95.813,7413.777 C98.04,7413.523 100.38,7412.656 100.38,7408.718 C100.38,7407.598 99.992,7406.684 99.35,7405.966 C99.454,7405.707 99.797,7404.664 99.252,7403.252 C99.252,7403.252 98.414,7402.977 96.505,7404.303 C95.706,7404.076 94.85,7403.962 94,7403.958 C93.15,7403.962 92.295,7404.076 91.497,7404.303 C89.586,7402.977 88.746,7403.252 88.746,7403.252 C88.203,7404.664 88.546,7405.707 88.649,7405.966 C88.01,7406.684 87.619,7407.598 87.619,7408.718 C87.619,7412.646 89.954,7413.526 92.175,7413.785 C91.889,7414.041 91.63,7414.493 91.54,7415.156 C90.97,7415.418 89.522,7415.871 88.63,7414.304 C88.63,7414.304 88.101,7413.319 87.097,7413.247 C87.097,7413.247 86.122,7413.234 87.029,7413.87 C87.029,7413.87 87.684,7414.185 88.139,7415.37 C88.139,7415.37 88.726,7417.2 91.508,7416.58 C91.513,7417.437 91.522,7418.245 91.522,7418.489 C91.522,7418.76 91.338,7419.077 90.839,7418.982 C86.865,7417.627 84,7413.783 84,7409.253 C84,7403.59 88.478,7399 94,7399"></path></g></g></g></svg></td>'; hm += '</tr>'; hm += '</table>';
    let hs = '<div id="' + id + 'Settings">';
    hs += '<form>'; hs += '<label>Pivot rows</label><br>'; for (let i = 0; i < 3; i++) { let so = '<option></option>'; for (let i2 = 0; i2 < dh.length; i2++) { let x = ''; if (opr.hasOwnProperty(i)) { if (opr[i] == i2) { x = 'selected'; } } so += '<option ' + x + ' value="' + i2 + '">' + dh[i2] + '</option>'; } hs += '<select id="' + id + 'PivotRows' + i + '" style="width: 100px; margin-top: 2px;">' + so +'</select><br>'; } hs += '</form>';
    hs += '<form style="margin-top: 3px;">'; hs += '<label>Pivot columns</label><br>'; for (let i = 0; i < 3; i++) { let so = '<option></option>'; for (let i2 = 0; i2 < dh.length; i2++) { let x = ''; if (opc.hasOwnProperty(i)) { if (opc[i] == i2) { x = 'selected'; } } so += '<option ' + x + ' value="' + i2 + '">' + dh[i2] + '</option>'; } hs += '<select id="' + id + 'PivotCols' + i + '" style="width: 100px; margin-top: 2px;">' + so +'</select><br>'; } hs += '</form>';
    hs += '<form style="margin-top: 3px;">'; hs += '<label>Pivot value</label><br>'; for (let i = 0; i < 1; i++) { hs += '<select id="' + id + 'PivotValueFormula" style="width: 100px; margin-top: 2px;">'; hs += '<option ';  if (opv.formula == 'Count') { hs += 'selected'; } hs += ' value="Count">Count</option>'; hs += '<option ';  if (opv.formula == 'Sum') { hs += 'selected'; } hs += ' value="Sum">Sum</option>'; hs += '</select><br>'; let so = ''; for (let i2 = 0; i2 < dh.length; i2++) { let x = ''; if (opv.hasOwnProperty('column')) { if (opv.column == i2) { x = 'selected'; } } so += '<option ' + x + ' value="' + i2 + '">' + dh[i2] + '</option>'; } let cd = 'block'; if (opv.formula == 'Count') { cd = 'none'; } hs += '<select id="' + id + 'PivotValueColumn" style="width: 100px; margin-top: 2px; display: ' + cd + ';">' + so +'</select>'; } hs += '</form>';
    hs += '<form style="margin-top: 5px;">'; hs += '<label>Pivot limits</label><br>'; hs += '<input id="' + id + 'PivotLimitRows" style="width: 40px;" type="number" min=1 value="' + opl.rows + '">'; hs += '<input id="' + id + 'PivotLimitCols" style="width: 40px; margin-left: 2px;" type="number" min=1 value="' + opl.cols + '">'; hs += '</form>';
    hs += '<form style="margin-top: 5px;">'; hs += '<label>Table limit</label><br>'; hs += '<input id="' + id + 'TableLimit" style="width: 50px; margin-top: 2px;" type="number" min=1 value="' + otl + '">'; hs += '</form>';
    hs += '<form style="margin-top: 5px;">'; hs += '<label>Columns</label><br>'; for (let i = 0; i < dh.length; i++) { hs += '<div style="margin-top: 2px;">'; hs += '<div style="display: inline-block; vertical-align: top; width: 15px; height: 20px;">'; hs += '<div id="' + id + 'Column' + i + 'SortAsc" style="cursor: pointer; display: block; vertical-align: top; width: 15px; height: 10px; border-left: 1px solid grey; border-right: 1px solid grey; border-top: 1px solid grey; border-bottom: 0.5px solid grey; padding: 0px; font-size: 8px; text-align: center; vertical-align: middle;">▲</div>'; hs += '<div id="' + id + 'Column' + i + 'SortDesc" style="cursor: pointer; display: block; vertical-align: bottom; width: 15px; height: 10px; border-left: 1px solid grey; border-right: 1px solid grey; border-top: 0.5px solid grey; border-bottom: 1px solid grey; padding: 0px; font-size: 8px; text-align: center; vertical-align: middle;">▼</div>'; hs += '</div>'; hs += '<input id="' + id + 'Column' + i + 'Filter" style="height: 17px; width: 80px; margin-left: 4px;" type="text" placeholder="' + dh[i] + '" value="'; if (ofc.hasOwnProperty(i)) { hs += ofc[i]; } hs += '">'; hs += '<input id="' + id + 'Column' + i + 'Hide" style="cursor: pointer; display: inline-block; vertical-align: middle;" checked type="checkbox">'; hs += '</div>'; } hs += '<button id="' + id + 'Clear" type="button" style="cursor: pointer; margin-top: 3px; padding: 0px 2px; font-size: 11px;">Remove sorting & filters</button>'; hs += '</form>';
    hs += '</div>';
    let hc = '<div id="' + id + 'Container" style="display: grid; grid-template-columns: ' + ws + 'px auto; gap: 0px; padding: 0px;">';
    hc += hs; hc += '<div>'; hc += '<div id="' + id + 'Chart"></div>'; hc += '<div id="' + id + 'Pivot"></div>'; hc += '<div id="' + id + 'Table"></div>'; hc += '</div>'; hc += '</div>';
    t.innerHTML = ''; t.innerHTML += hm; t.innerHTML += hc;
    i(); j();
    function i() { document.getElementById(id + 'ToggleSettings').onclick = function() { options.visibility.settings = !options.visibility.settings; a(true); }; document.getElementById(id + 'ToggleChart').onclick = function() { options.visibility.chart = !options.visibility.chart; a(true); }; document.getElementById(id + 'TogglePivot').onclick = function() { options.visibility.pivot = !options.visibility.pivot; a(true); }; document.getElementById(id + 'ToggleTable').onclick = function() { options.visibility.table = !options.visibility.table; a(true); }; document.getElementById(id + 'ToggleSearch').onclick = function() { document.getElementById(id + 'Search').focus(); }; document.getElementById(id + 'Search').oninput = function() { options.filters.search = this.value; a(false); }; document.getElementById(id + 'ToggleLink').onclick = function() { window.open('https://github.com/jarviju/insight') }; }
    function j() { for (let i = 0; i < 3; i++) { document.getElementById(id + 'PivotRows' + i).oninput = function() { if (this.value == '') { options.pivot.rows.splice(i, 1) } else {options.pivot.rows[i] = this.value; } a(false); }; document.getElementById(id + 'PivotCols' + i).oninput = function() { if (this.value == '') { options.pivot.cols.splice(i, 1) } else {options.pivot.cols[i] = this.value; } a(false); }; } document.getElementById(id + 'PivotValueFormula').oninput = function() { options.pivot.value.formula = this.value; a(true); }; document.getElementById(id + 'PivotValueColumn').oninput = function() { options.pivot.value.column = this.value; a(false); }; document.getElementById(id + 'PivotLimitRows').oninput = function() { options.pivot.limit.rows = this.value; a(false); }; document.getElementById(id + 'PivotLimitCols').oninput = function() { options.pivot.limit.cols = this.value; a(false); }; document.getElementById(id + 'TableLimit').oninput = function() { options.table.limit = this.value; a(false); }; for (let i = 0; i < dh.length; i++) { document.getElementById(id + 'Column' + i + 'SortAsc').onclick = function() { options.table.sort = [i, false]; a(false); }; document.getElementById(id + 'Column' + i + 'SortDesc').onclick = function() { options.table.sort = [i, true]; a(false); }; document.getElementById(id + 'Column' + i + 'Filter').oninput = function() { if (this.value == '') { delete options.filters.columns[i]; } else { options.filters.columns[i] = this.value; } a(false); }; document.getElementById(id + 'Column' + i + 'Hide').onclick = function() { if (this.checked) { delete options.table.hidden[i]; } else { options.table.hidden[i] = true; } a(false); }; } document.getElementById(id + 'Clear').onclick = function() { options.table.sort = []; options.filters.search = ''; options.filters.columns = {}; options.drill_down = {}; a(true); }; } }
  function c() {
    let md = {}; let mr = {}; let mc = {}; let mt = 0;
    for (let i = 0; i < dr.length; i++) {
      let mks = [];
      let rks = []; let rk = ''; for (let i2 = 0; i2 < opr.length; i2++) { rks.push(dr[i][opr[i2]]); mks.push(dr[i][opr[i2]]); } rk = rks.join('|'); if (!mr.hasOwnProperty(rk)) { mr[rk] = { key: rk, keys: rks, total: 0 }; }
      let cks = []; let ck = ''; for (let i2 = 0; i2 < opc.length; i2++) { cks.push(dr[i][opc[i2]]); mks.push(dr[i][opc[i2]]); } ck = cks.join('|'); if (!mc.hasOwnProperty(ck)) { mc[ck] = { key: ck, keys: cks, total: 0 }; }
      let mk = mks.join('|'); if (!md.hasOwnProperty(mk)) { md[mk] = 0; }
      if (opv.formula == 'Count') { mr[rk]['total'] += 1; mc[ck]['total'] += 1; md[mk] += 1; mt += 1; }
      else if (opv.formula == 'Sum') { let sv = 1; if (!isNaN(Number(dr[i][opv.column]))) { sv = Number(dr[i][opv.column]); } mr[rk]['total'] += sv; mc[ck]['total'] += sv; md[mk] += sv; mt += sv; }
    }
    let ra = []; for (const [y, x] of Object.entries(mr)) { ra.push(x); } let ca = []; for (const [y, x] of Object.entries(mc)) { ca.push(x); }
    ra.sort(function(a,b) { if (ops['row'][1]) { if (!isNaN(a[ops['row'][0]]) && !isNaN(b[ops['row'][0]])) { return Number(a[ops['row'][0]]) > Number(b[ops['row'][0]]) ? 1 : -1; } else { return a[ops['row'][0]] > b[ops['row'][0]] ? 1 : -1; } } else { if (!isNaN(a[ops['row'][0]]) && !isNaN(b[ops['row'][0]])) { return Number(a[ops['row'][0]]) < Number(b[ops['row'][0]]) ? 1 : -1; } else { return a[ops['row'][0]] < b[ops['row'][0]] ? 1 : -1; } } });
    ca.sort(function(a,b) { if (ops['col'][1]) { if (!isNaN(a[ops['col'][0]]) && !isNaN(b[ops['col'][0]])) { return Number(a[ops['col'][0]]) > Number(b[ops['col'][0]]) ? 1 : -1; } else { return a[ops['col'][0]] > b[ops['col'][0]] ? 1 : -1; } } else { if (!isNaN(a[ops['col'][0]]) && !isNaN(b[ops['col'][0]])) { return Number(a[ops['col'][0]]) < Number(b[ops['col'][0]]) ? 1 : -1; } else { return a[ops['col'][0]] < b[ops['col'][0]] ? 1 : -1; } } });
    let ac = ['#0E6EB8', '#FB8C00', '#7B1FA2', '#4CAF50', '#D50000', '#6D4C41']; let ic = 0; for (let i = 0; i < ra.length; i++) { if (ic == ac.length) { ic = 0; } ra[i].color = ac[ic]; ic++; }
    let rows = []; let cols = []; let round = Math.pow(10, opv.round);
    for (let i = 0; i < ra.length; i++) { if (i < opl.rows || opl.rows == 0) { rows.push(ra[i]); rows[i].total = Math.round(ra[i].total*round) / round; } }
    for (let i = 0; i < ca.length; i++) { if (i < opl.cols || opl.cols == 0) { cols.push(ca[i]); cols[i].total = Math.round(ca[i].total*round) / round; } }
    for (const [y, x] of Object.entries(md)) { md[y] = Math.round(x*round) / round; }
    mt = Math.round(mt*round) / round;
    if (ovc) { f(); k(); } if (ovp) { e(); l(); }
    function f() {
      let da = []; let sm = 0;
      if (opc.length > 0) { for (let i = 0; i < cols.length; i++) { let db = {}; db.key = cols[i].key; db.values = []; if (opr.length > 0) { for (let i2 = 0; i2 < rows.length; i2++) { let mk = [rows[i2].key, cols[i].key].join('|'); if (md.hasOwnProperty(mk)) { db.values.push([rows[i2].key, Math.abs(md[mk]), rows[i2].color, {rows: rows[i2].keys, cols: cols[i].keys}]); } } } else { db.values.push(['Total', Math.abs(cols[i]['total']), '#0E6EB8']); } da.push(db); if (sm < Math.abs(cols[i]['total'])) { sm = Math.abs(cols[i]['total']); } } } else { for (let i = 0; i < rows.length; i++) { let db = {}; db.key = rows[i].key; db.values = []; db.values.push(['Total', Math.abs(rows[i]['total']), '#0E6EB8']); da.push(db); if (sm < Math.abs(rows[i]['total'])) { sm = Math.abs(rows[i]['total']); } } }
      let d_c = document.getElementById(id + 'Chart'); let sw = (wd-115) - 10; let sh = d_c.offsetHeight; let sb = ''; let ss = sh / sm * 0.9; let bw = 40; let bp = 2; if (da.length > 5) { bw = 30; bp = 2; } if (da.length > 15) { bw = 25; bp = 2; } if (da.length > 25) { bw = sw / da.length; bp = 1; }
      for (let i = 0; i < da.length; i++) {
        let by = sh;
        for (let i2 = da[i]['values'].length - 1; i2 >= 0; i2--) {
          let bv = da[i]['values'][i2][1]; let bh = bv * ss; let bx = (bw * i); by = by - bh; let bc = da[i]['values'][i2][2];
          let key = da[i]['values'][i2][0] + '|' + da[i]['key']; let ddd = { key: key }; if (da[i]['values'][i2].hasOwnProperty('3')) { for (let i3 = 0; i3 < da[i]['values'][i2][3].rows.length; i3++) { ddd[opr[i3]] = da[i]['values'][i2][3].rows[i3]; } } if (da[i]['values'][i2].hasOwnProperty('3')) { for (let i3 = 0; i3 < da[i]['values'][i2][3].cols.length; i3++) { ddd[opc[i3]] = da[i]['values'][i2][3].cols[i3]; } } if (odd.key == key) { bc = '#000000'; } sb += '<rect '; sb += ' class="' + id + 'ChartBar"'; sb += ' x="' + bx + '" y="' + by + '"'; sb += ' width="' + (bw-bp) + '" height="' + bh + '"'; sb += ' style="fill:' + bc + '; cursor: pointer;"'; sb += " data-color='" + bc + "'"; sb += " data-dd='" + JSON.stringify(ddd) + "'"; sb += '/>';
        }
      }
      d_c.innerHTML = '<svg width="' + sw + '" height="' + sh + '">' + sb + '</svg>';
    }
    function k() { let scb = document.querySelectorAll('.' + id + 'ChartBar'); for (let i = 0; i < scb.length; i++) { scb[i].onmouseenter = function() { this.style.fill = '#303030'; }; scb[i].onmouseout = function() { this.style.fill = scb[i].dataset.color; }; scb[i].onclick = function() { options.drill_down = JSON.parse(this.dataset.dd); a(false); } } }
    function e() {
      t = document.getElementById(id + 'Pivot'); t.style['margin-top'] = '5px'; t.style['overflow'] = 'auto'; let hp = ''; hp += '<table style="all: unset; border-spacing: 0; background-color: white; white-space: nowrap; line-height: 1;">';
      for (let i = 0; i < opc.length; i++) {
        hp += '<tr>'; for (let i2 = 0; i2 < opr.length; i2++) { hp += '<th></th>'; } let dir = ''; if (ops.col[0] == 'keys') { dir = '<div style="display: inline; font-size: 10px;">'; if (ops.col[1]) { dir += '◀</div>'; } else { dir += '▶</div>'; } } hp += '<th class="' + id + 'PivotColumnKey" style="cursor: pointer; padding: 2px 6px; text-align: right; background-color: #f9f9f9; border: 0.5px solid #E1E2E2;">' + dh[opc[i]] + ' ' + dir + '</th>';
        let hco = 1; for (let i2 = 0; i2 < cols.length; i2++) { if (i+1 == opc.length) { hp += '<th rowspan="2" style="padding: 2px 6px; text-align: center; background-color: #f9f9f9; border: 0.5px solid #E1E2E2;">' + cols[i2]['keys'][i] + '</th>'; } else { if ((i2+1) < cols.length) { if (cols[i2]['keys'][i] == cols[i2+1]['keys'][i]) { hco++; } else { hp += '<th colspan="' + hco + '" style="padding: 2px 6px; text-align: center; background-color: #f9f9f9; border: 0.5px solid #E1E2E2;">' + cols[i2]['keys'][i] + '</th>'; hco = 1; } } else { hp += '<th colspan="' + hco + '" style="padding: 2px 6px; text-align: center; background-color: #f9f9f9; border: 0.5px solid #E1E2E2;">' + cols[i2]['keys'][i] + '</th>'; } } }
        dir = ''; if (ops.row[0] == 'total') { if (ops.row[1]) { dir = '▲'; } else { dir = '▼'; } } if (i == 0) { hp += '<th id="' + id + 'PivotRowTotalLabel" rowspan="' + (opc.length + 1) + '" style="cursor: pointer; padding: 2px 6px; text-align: left; background-color: #f9f9f9; border: 0.5px solid #E1E2E2;">Totals ' + dir + '</th>'; } hp += '</tr>';
      }
      if (opr.length > 0 || opc.length > 0) {
        let dir = ''; if (ops.row[0] == 'keys') { if (ops.row[1]) { dir = '▲'; } else { dir = '▼'; } }
        hp += '<tr>'; for (let i = 0; i < opr.length; i++) { if (opc.length > 0) { hp += '<th class="' + id + 'PivotRowKey" style="cursor: pointer; padding: 2px 6px; text-align: center; background-color: #f9f9f9; border: 0.5px solid #E1E2E2;">' + dh[opr[i]] + ' ' + dir + '</th>'; if (i+1 == opr.length) { hp += '<th style="padding: 2px 6px; text-align: center; background-color: #f9f9f9; border: 0.5px solid #E1E2E2;"></th>'; } } else { hp += '<th class="' + id + 'PivotRowKey" style="cursor: pointer; padding: 2px 6px; text-align: center; background-color: #f9f9f9; border: 0.5px solid #E1E2E2;">' + dh[opr[i]] + ' ' + dir + '</th>'; if (i+1 == opr.length) {  dir = ''; if (ops.row[0] == 'total') { if (ops.row[1]) { dir = '▲'; } else { dir = '▼'; } } hp += '<th id="' + id + 'PivotRowTotalLabel" style="cursor: pointer; padding: 2px 6px; text-align: left; background-color: #f9f9f9; border: 0.5px solid #E1E2E2;">Totals ' + dir + '</th>'; } } } hp += '</tr>';
      }
      if (opr.length > 0) {
        for (let i = 0; i < rows.length; i++) {
          hp += '<tr>'; for (let i2 = 0; i2 < rows[i]['keys'].length; i2++) { let cbo = 'border-left: 0.5px solid #E1E2E2; border-right: 0.5px solid #E1E2E2; border-top: 0.5px solid #E1E2E2;'; let hla = rows[i]['keys'][i2]; if (i > 0) { if (rows[i]['keys'][i2] == rows[i-1]['keys'][i2]) { hla = ''; cbo = 'border-left: 0.5px solid #E1E2E2; border-right: 0.5px solid #E1E2E2;'; } } let hco = 1; if (i2+1 == rows[i]['keys'].length && opc.length > 0) { hco = 2; hla = rows[i]['keys'][i2]; cbo = 'border-left: 0.5px solid #E1E2E2; border-right: 0.5px solid #E1E2E2; border-top: 0.5px solid #E1E2E2;'; } let cc = ''; if (i2+1 == rows[i]['keys'].length) { cc = '<div style="display: inline-block; width: 8px; height: 8px; margin-right: 2px; background: ' + rows[i].color + ';"></div>'; } hp += '<th colspan="' + hco + '" style="padding: 2px 6px; text-align: left; background-color: #f9f9f9; ' + cbo + '">' + cc + hla + '</th>'; }
          if (opc.length > 0) { for (let i2 = 0; i2 < cols.length; i2++) { let key = [rows[i]['key'], cols[i2]['key']].join('|'); if (md.hasOwnProperty(key)) { let cb = '#FFFFFF'; let cc = '#000000'; let chb = '#f4f4f4'; if (odd.key == key) { cb = 'grey'; cc = '#FFFFFF'; chb = 'grey'; } let ddd = { key: key }; for (let i3 = 0; i3 < opr.length; i3++) { ddd[opr[i3]] = rows[i]['keys'][i3]; } for (let i3 = 0; i3 < opc.length; i3++) { ddd[opc[i3]] = cols[i2]['keys'][i3]; } hp += '<td class="' + id + 'PivotMatrixValue"'; hp += " data-dd='" + JSON.stringify(ddd) + "'"; hp += ' style="cursor:pointer; background: ' + cb + '; color: ' + cc + '; padding: 0px 6px; text-align: center; border: 0.5px solid #E1E2E2;">'; hp += md[key]; hp += '</td>'; } else { hp += '<td style="padding: 0px 6px; border: 0.5px solid #E1E2E2;"></td>'; } } }
          let cb = '#f9f9f9'; let cc = '#000000'; let chb = '#f4f4f4'; if (odd.key == rows[i]['key']) { cb = 'grey'; cc = '#FFFFFF'; chb = 'grey'; }
          let ddd = { key: rows[i]['key'] };
          for (let i3 = 0; i3 < opr.length; i3++) { ddd[opr[i3]] = rows[i]['keys'][i3]; } hp += '<th class="' + id + 'PivotRowTotalValue"'; hp += " data-dd='" + JSON.stringify(ddd) + "'"; hp += ' style="cursor:pointer; padding: 2px 6px; text-align: center; background: ' + cb + '; color: ' + cc + '; border: 0.5px solid #E1E2E2;">'; hp += rows[i]['total']; hp += '</th>'; hp += '</tr>'; }
      }
      hp += '<tr>'; let dir = ''; if (ops.col[0] == 'total') { dir = '<div style="display: inline; font-size: 10px;">'; if (ops.col[1]) { dir += '◀</div>'; } else { dir += '▶</div>'; } } if (opc.length > 0) { hp += '<th id="' + id + 'PivotColumnTotalLabel" colspan="' + (opr.length + 1) + '" style="cursor: pointer; text-align: right; padding: 2px 6px; background-color: #f9f9f9; border: 0.5px solid #E1E2E2;">Totals ' + dir + '</th>'; for (let i = 0; i < cols.length; i++) { let cb = '#f9f9f9'; let cc = '#000000'; let chb = '#f4f4f4'; if (odd.key == cols[i]['key']) { cb = 'grey'; cc = '#FFFFFF'; chb = 'grey'; } let ddd = { key: cols[i]['key'] }; for (let i3 = 0; i3 < opc.length; i3++) { ddd[opc[i3]] = cols[i]['keys'][i3]; } hp += '<th class="' + id + 'PivotColumnTotalValue"'; hp += " data-dd='" + JSON.stringify(ddd) + "'"; hp += ' style="cursor: pointer; padding: 2px 6px; text-align: center; background: ' + cb + '; color: ' + cc + '; border: 0.5px solid #E1E2E2;">'; hp += cols[i]['total']; hp += '</th>'; } } else { hp += '<th id="' + id + 'PivotColumnTotalLabel" colspan="' + opr.length + '" style="cursor: pointer; text-align: right; padding: 2px 6px; background-color: #f9f9f9; border: 0.5px solid #E1E2E2;">Totals ' + dir + '</th>'; } hp += '<th id="' + id + 'PivotTotalValue" style="cursor: pointer; padding: 2px 6px; text-align: center; background-color: #f9f9f9; border: 0.5px solid #E1E2E2;">' + mt + '</th>'; hp += '</tr>';
      hp += '</table>';
      t.innerHTML = hp;
    }
    function l() { let prtl = document.querySelectorAll('#' + id + 'PivotRowTotalLabel'); for (let i = 0; i < prtl.length; i++) { prtl[i].onclick = function() { options.pivot.sort.row[0] = 'total'; options.pivot.sort.row[1] = !ops.row[1]; a(false); }; } let pctl = document.querySelectorAll('#' + id + 'PivotColumnTotalLabel'); for (let i = 0; i < pctl.length; i++) { pctl[i].onclick = function() { options.pivot.sort.col[0] = 'total'; options.pivot.sort.col[1] = !ops.col[1]; a(false); }; } let pck = document.querySelectorAll('.' + id + 'PivotColumnKey'); for (let i = 0; i < pck.length; i++) { pck[i].onclick = function() { options.pivot.sort.col[0] = 'keys'; options.pivot.sort.col[1] = !ops.col[1]; a(false); }; } let pivot_rks = document.querySelectorAll('.' + id + 'PivotRowKey'); for (let i = 0; i < pivot_rks.length; i++) { pivot_rks[i].onclick = function() { options.pivot.sort.row[0] = 'keys'; options.pivot.sort.row[1] = !ops.row[1]; a(false); }; } let prtv = document.querySelectorAll('.' + id + 'PivotRowTotalValue'); for (let i = 0; i < prtv.length; i++) { prtv[i].onclick = function() { options.drill_down = JSON.parse(prtv[i].dataset.dd); a(false); } } let pctv = document.querySelectorAll('.' + id + 'PivotColumnTotalValue'); for (let i = 0; i < pctv.length; i++) { pctv[i].onclick = function() { options.drill_down = JSON.parse(pctv[i].dataset.dd); a(false); } } let ptv = document.getElementById(id + 'PivotTotalValue'); ptv.onclick = function() { options.drill_down = {}; a(false); }; let pmv = document.querySelectorAll('.' + id + 'PivotMatrixValue'); for (let i = 0; i < pmv.length; i++) { pmv[i].onclick = function() { options.drill_down = JSON.parse(pmv[i].dataset.dd); a(false); } } }
  }
  function d() {
    let hdd = false; if (odd.hasOwnProperty('key')) { hdd = true; }
    if (options.table.hasOwnProperty('sort')) { dr.sort(function(a,b) { if (options.table.sort[1]) { return a[options.table.sort[0]] < b[options.table.sort[0]] ? 1 : -1; } else { return a[options.table.sort[0]] > b[options.table.sort[0]] ? 1 : -1; } }); }
    t = document.getElementById(id + 'Table'); t.innerHTML = ''; t.style['margin-top'] = '5px'; t.style['overflow'] = 'auto';
    let hh = '<thead'; hh += ' style="position: sticky; inset-block-start: 0; z-index: 100;"'; hh += '>'; hh += '<tr>';
    for (let i = 0; i < dh.length; i++) { let cd = ''; if (oth.hasOwnProperty(i)) { cd = 'display: none;'; } hh += '<th id="' + id + 'TableHeader' + i + '"'; hh += ' style="' + cd + 'padding: 2px 6px; background-color: #f9f9f9; border: 0.5px solid #E1E2E2; cursor: pointer;"'; hh += '>'; hh += dh[i]; if (options.table.hasOwnProperty('sort')) { if (ots[0] == i) { if (ots[1]) { hh += '<div style="display: inline; font-size: 10px;"> ▼</div>'; } else { hh += '<div style="display: inline; font-size: 10px;"> ▲</div>'; } } } hh += '</th>'; }
    hh += '</tr></thead>';
    let hb = '<tbody>'; let hl = 0;
    for (let i = 0; i < dr.length; i++) { let draw = true; let row = Object.values(dr[i]); let tr = '<tr class="' + id + 'TableRow"'; tr += '>'; for (let i2 = 0; i2 < row.length; i2++) { let cd = ''; if (oth.hasOwnProperty(i2)) { cd = 'display: none;'; } tr += '<td'; tr += ' style="' + cd + 'padding: 0px 6px; border: 0.5px solid #E1E2E2;"'; tr += '>'; tr += row[i2]; tr += '</td>'; if (hdd && odd.hasOwnProperty(i2)) { if (odd[i2] != row[i2]) { draw = false; } } } tr += '</tr>'; if (draw) { hb += tr; hl++; } if (hl > 0 && otl == hl) { break; } }
    if (dr.length == 0) { hb += '<tr><td colspan="' + dh.length + '" style="text-align: center; padding: 0px 6px; background-color: #FFFFFF; border: 0.5px solid #E1E2E2;">No matching records found</td></tr>'; }
    hb += '</tbody>';
    let hf = '<tfoot'; hf += ' style="position: sticky; bottom: 0; z-index: 100;"'; hf += '>'; hf += '<tr>'; hf += '<th colspan="' + dh.length + '" style="text-align: left; padding: 2px 6px; background-color: #f9f9f9; border: 0.5px solid #E1E2E2;">'; if (hdd) { hf += '<div style="cursor: pointer;">Drill-down active</div>'; } else { hf += dr.length + '/' + input.length + ' rows'; } hf += '</th>'; hf += '<tr></tfoot>';
    let ht = ''; ht += '<table style="border-spacing: 0; background-color: white; white-space: nowrap;">'; ht += hh; ht += hb; ht += hf; ht += '</table>'; t.innerHTML += ht;
    m();
    function m() { for (let i = 0; i < dh.length; i++) { let dir = false; if (options.table.hasOwnProperty('sort')) { if (options.table.sort[0] == i) { dir = !options.table.sort[1]; } } let th = document.getElementById(id + 'TableHeader' + i); th.onclick = function() { options.table.sort=[i, dir]; a(false); } } }
  }
  function g() {
    let d_m = document.getElementById(id + 'Menu'); let d_s = document.getElementById(id + 'Settings'); let d_c = document.getElementById(id + 'Chart'); let d_p = document.getElementById(id + 'Pivot'); let d_t = document.getElementById(id + 'Table');
    if (ovs) { d_s.style['display'] = 'block'; } else { d_s.style['display'] = 'none'; } if (ovc) { d_c.style['display'] = 'block'; } else { d_c.style['display'] = 'none'; } if (ovp) { d_p.style['display'] = 'block'; } else { d_p.style['display'] = 'none'; } if (ovt) { d_t.style['display'] = 'block'; } else { d_t.style['display'] = 'none'; }
    let hd = document.getElementById(div).offsetHeight - 40; wd = document.getElementById(div).offsetWidth; d_m.style['width'] = wd + 'px'; if (ovs) { ws = 135; } else { ws = 0; } d_c.style['width'] = (wd-ws) + 'px'; d_p.style['width'] = (wd-ws) + 'px'; d_t.style['width'] = (wd-ws) + 'px';
    if (ovc && !ovp && !ovt) { d_c.style.height = hd + 'px'; }
    else if (!ovc && ovp && !ovt) { d_p.style['max-height'] = hd + 'px'; }
    else if (!ovc && !ovp && ovt) { d_t.style['max-height'] = hd + 'px'; }
    else if (ovc && ovp && !ovt) { d_c.style['height'] = (hd * (1/4)) + 'px'; d_p.style['max-height'] = (hd * (3/4)) + 'px'; }
    else if (ovc && !ovp && ovt) { d_c.style['height'] = (hd * (1/4)) + 'px'; d_t.style['max-height'] = (hd * (3/4)) + 'px'; }
    else if (!ovc && ovp && ovt) { d_p.style['max-height'] = (hd/2) + 'px'; d_t.style['max-height'] = (hd/2) + 'px'; setTimeout(function() { d_t.style['max-height'] = (hd - d_p.offsetHeight) + 'px'; }, 200); }
    else if (ovc && ovp && ovt) { d_c.style['height'] = (hd * (1/4)) + 'px'; d_p.style['max-height'] = (hd * (3/8)) + 'px'; d_t.style['max-height'] = (hd * (3/8)) + 'px'; setTimeout(function() { d_t.style['max-height'] = ((hd * (3/4)) - d_p.offsetHeight) + 'px'; }, 200); }
  }
  function h() { document.addEventListener("keydown", function (event) { if (event.ctrlKey && event.key == "f") { event.preventDefault(); document.getElementById(id + "Search").focus(); } }); }
}
